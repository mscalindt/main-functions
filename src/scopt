#! .desc:
# True if specific complex (argument) option
#! .params:
# <"$1"+> - *
#! .uses:
# <opt> $ - string;
#           first positional parameter of the main environment
# <opt_arg> $ - string;
#               second positional parameter of the main environment
#! .gives:
# (0) <"$opt_arg"> - string;
#                    option argument
# (0) <"$opt_match"> - string;
#                      literal option matched
# (0) <$shiftN> - integer;
#                 shift count
#! .rc:
# (0) match
# (1) no match
#.
scopt() {
    scopt_arg_invalid() {
        printf "%s: Invalid argument specification for: '%s'\n" \
            "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
            "${0##*/}" "${0##*/}"
    } >&2

    scopt_arg_missing() {
        printf "%s: Option '%s' requires an argument.\n" \
            "${0##*/}" "$1"
        printf "%s: Try '%s --help' for more information.\n" \
            "${0##*/}" "${0##*/}"
    } >&2

    [ "$opt" ] || return 1

    for _arg in "$@"; do
        case "$opt " in
            "$_arg"'= ')
                scopt_arg_invalid "$_arg"

                exit 2
            ;;
            "$_arg"'='*)
                opt_arg="${opt#"$_arg"=}"; opt=; opt_match="$_arg"; \
                shiftN=1

                return 0
            ;;
            "$_arg"' ')
                [ "$opt_arg" ] || { scopt_arg_missing "$_arg"; exit 2; }

                opt=; opt_match="$_arg"; shiftN=2

                return 0
            ;;
        esac
    done

    return 1
}